use num_bigint::BigInt;
use num_traits::{Zero, One};
use rand::Rng;
use std::error::Error;
use std::fmt;

// Define a custom error type for cryptographic operations
#[derive(Debug)]
struct CryptoError(String);

impl fmt::Display for CryptoError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Crypto error: {}", self.0)
    }
}

impl Error for CryptoError {}

// Define a finite field for arithmetic operations
struct FiniteField {
    prime: BigInt, // A large prime number
}

impl FiniteField {
    // Create a new finite field with a predefined prime
    fn new() -> Self {
        // Use a 128-bit prime for simplicity
        let prime = BigInt::parse_bytes(b"170141183460469231731687303715884105727", 10).unwrap();
        FiniteField { prime }
    }

    // Add two numbers in the field
    fn add(&self, a: &BigInt, b: &BigInt) -> BigInt {
        (a + b) % &self.prime
    }

    // Multiply two numbers in the field
    fn mul(&self, a: &BigInt, b: &BigInt) -> BigInt {
        (a * b) % &self.prime
    }

    // Compute the modular inverse of a number
    fn inv(&self, a: &BigInt) -> Result<BigInt, CryptoError> {
        let egcd = a.extended_gcd(&self.prime);
        if egcd.gcd != BigInt::one() {
            return Err(CryptoError("No modular inverse exists".into()));
        }
        Ok(egcd.x.mod_floor(&self.prime))
    }
}

// Shamir's Secret Sharing implementation
struct ShamirSecretSharing {
    field: FiniteField,
}

impl ShamirSecretSharing {
    // Create a new instance
    fn new() -> Self {
        ShamirSecretSharing {
            field: FiniteField::new(),
        }
    }

    // Generate shares from a secret
    fn generate_shares(&self, secret: &BigInt, total_shares: usize, threshold: usize) -> Result<Vec<(BigInt, BigInt)>, CryptoError> {
        if threshold > total_shares {
            return Err(CryptoError("Threshold cannot be greater than total shares".into()));
        }

        // Generate random coefficients for the polynomial
        let mut coefficients = vec![secret.clone()];
        for _ in 1..threshold {
            let coeff = rand::thread_rng().gen::<u64>().into();
            coefficients.push(coeff);
        }

        // Evaluate the polynomial at x = 1, 2, ..., total_shares
        let mut shares = Vec::with_capacity(total_shares);
        for x in 1..=total_shares {
            let x_val = BigInt::from(x as u32);
            let mut y = coefficients[0].clone();
            let mut x_pow = x_val.clone();

            for coeff in coefficients.iter().skip(1) {
                y = self.field.add(&y, &self.field.mul(coeff, &x_pow));
                x_pow = self.field.mul(&x_pow, &x_val);
            }
            shares.push((x_val, y));
        }

        Ok(shares)
    }

    // Reconstruct the secret from shares using Lagrange interpolation
    fn reconstruct_secret(&self, shares: &[(BigInt, BigInt)]) -> Result<BigInt, CryptoError> {
        let mut secret = BigInt::zero();

        for (i, (x_i, y_i)) in shares.iter().enumerate() {
            let mut term = y_i.clone();

            for (j, (x_j, _)) in shares.iter().enumerate() {
                if i != j {
                    let numerator = x_j.clone();
                    let denominator = self.field.sub(x_j, x_i);
                    let inv_denominator = self.field.inv(&denominator)?;
                    let factor = self.field.mul(&numerator, &inv_denominator);
                    term = self.field.mul(&term, &factor);
                }
            }

            secret = self.field.add(&secret, &term);
        }

        Ok(secret)
    }
}

// Main function to demonstrate the implementation
fn main() -> Result<(), Box<dyn Error>> {
    let sss = ShamirSecretSharing::new();

    // Define the secret and parameters
    let secret = BigInt::from(123456); // The secret to share
    let total_shares = 10; // Total number of shares to generate
    let threshold = 6; // Minimum number of shares required to reconstruct the secret

    // Generate shares
    let shares = sss.generate_shares(&secret, total_shares, threshold)?;
    println!("Generated shares:");
    for (x, y) in &shares {
        println!("({}, {})", x, y);
    }

    // Reconstruct the secret from a subset of shares
    let reconstructed_secret = sss.reconstruct_secret(&shares[0..threshold])?;
    println!("Reconstructed secret: {}", reconstructed_secret);

    Ok(())
}